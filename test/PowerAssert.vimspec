Describe PowerAssert

  Before all
    let V = vital#of('vital')
    let g:PowerAssert = V.import('Vim.PowerAssert')
    let s:assert = g:PowerAssert.assert
    let ScriptLocal = V.import('Vim.ScriptLocal')
    let sfuncs = ScriptLocal.sfuncs('autoload/vital/__powerassert__/Vim/PowerAssert.vim')
  End

  function! CheckThrow(expr) abort
    return printf("Throws /vital: PowerAssert:/ :execute g:PowerAssert.assert('%s')", a:expr)
  endfunction

  Describe descriptive message
    It should output descriptive message on failure
      execute g:PowerAssert.define('PowerAssert')
      let msg = escape(join([
      \   "vital: PowerAssert:",
      \   "index(x.ary, l:zero) is# s:two",
      \   "     |||     |       |   |",
      \   "     |||     0       0   2",
      \   "     ||[1, 2, 3]",
      \   "     |{'ary': [1, 2, 3], 'power': 'assert'}",
      \   "     -1"
      \ ], "\n"), '[]')
      let x = { 'ary': [1, 2, 3], 'power': 'assert' }
      let l:zero = 0
      let s:two = 2
      execute printf('Throws /%s/ :PowerAssert index(x.ary, l:zero) is# s:two', msg)
      delcommand PowerAssert
    End

    It should support multibyte
      execute g:PowerAssert.define('PowerAssert')
      let msg = escape(join([
      \   "vital: PowerAssert:",
      \   "threeeeee  is# (index(x.ary, l:zero) is# s:two)",
      \   "|          |         |||     |       |   |",
      \   "'さん3333' 0         3||     0       0   2",
      \   "                      |[1, 'にーーー', 3, 0]",
      \   "                      {'ary': [1, 'にーーー', 3, 0], 'power': 'assert'}"
      \ ], "\n"), '[]')
      let x = { 'ary': [1, 'にーーー', 3, 0], 'power': 'assert' }
      let l:zero = 0
      let s:two = 2
      let threeeeee = 'さん3333'
      execute printf('Throws /%s/ :PowerAssert threeeeee  is# (index(x.ary, l:zero) is# s:two)', msg)
      delcommand PowerAssert
    End
  End

  Describe additional message
    It should output additional message
      execute g:PowerAssert.define('PowerAssert')
      let msg = escape(join([
      \   "vital: PowerAssert: THIS IS ADDITIONAL MESSAGE",
      \   "index(x.ary, l:zero) is# s:two",
      \   "     |||     |       |   |",
      \   "     |||     0       0   2",
      \   "     ||[1, 2, 3]",
      \   "     |{'ary': [1, 2, 3], 'power': 'assert'}",
      \   "     -1"
      \ ], "\n"), '[]')
      let x = { 'ary': [1, 2, 3], 'power': 'assert' }
      let l:zero = 0
      let s:two = 2
      execute printf('Throws /%s/ :PowerAssert index(x.ary, l:zero) is# s:two, ''%s''', msg, 'THIS IS ADDITIONAL MESSAGE')
      delcommand PowerAssert
    End

    It should be parsed and handled correctly
      execute g:PowerAssert.define('PowerAssert')
      Throws /vital: PowerAssert: hoge foo/ :PowerAssert has_key({}, 'x'), 'hoge foo'
      delcommand PowerAssert
    End
  End

  Describe .assert
    It does nothing if given expression is true
      execute s:assert('1 == 1')
      execute s:assert('1')
    End

    It support func call
      let xs = [1, 2, 3]
      execute s:assert('index(xs, 2) == 1')
    End

    It should support expression with double quote
      let _save = g:__vital_power_assert_config.__pseudo_throw__
      for bool in [0, 1]
        let g:__vital_power_assert_config.__pseudo_throw__ = bool
        try
          let x = 'vim'
          execute s:assert('x != "vi"')
          Throws /vital: PowerAssert:/ :execute g:PowerAssert.assert('x == "vi"')
        finally
          let g:__vital_power_assert_config.__pseudo_throw__ = _save
        endtry
      endfor
    End

    It should support expression with single quote
      let _save = g:__vital_power_assert_config.__pseudo_throw__
      for bool in [0, 1]
        let g:__vital_power_assert_config.__pseudo_throw__ = bool
        try
          let x = 'vim'
          execute s:assert("x != 'vi'")
          Throws /vital: PowerAssert:/ :execute g:PowerAssert.assert("x == 'vi'")
        finally
          let g:__vital_power_assert_config.__pseudo_throw__ = _save
        endtry
      endfor
    End

    It should support `\` in strings
      let _save = g:__vital_power_assert_config.__pseudo_throw__
      for bool in [0, 1]
        let g:__vital_power_assert_config.__pseudo_throw__ = bool
        try
          execute s:assert("'?' != '\\?'")
          Throws /vital: PowerAssert:/ :execute g:PowerAssert.assert("'?' == '\\?'")
        finally
          let g:__vital_power_assert_config.__pseudo_throw__ = _save
        endtry
      endfor
    End

    It should output additional message
      let _save = g:__vital_power_assert_config.__pseudo_throw__
      let g:__vital_power_assert_config.__pseudo_throw__ = 0
      try
        let x = 'vim'
        execute s:assert("x != 'vi'")
        Throws /vital: PowerAssert: THIS IS ADDITIONAL MESSAGE/ :execute g:PowerAssert.assert("x == 'vi'", 'THIS IS ADDITIONAL MESSAGE')
      finally
        let g:__vital_power_assert_config.__pseudo_throw__ = _save
      endtry
    End

    It should support nested dict
      let _save = g:__vital_power_assert_config.__pseudo_throw__
      let g:__vital_power_assert_config.__pseudo_throw__ = 0
      try
        let d = {}
        let d.d = d
        execute s:assert("d != {}")
        Throws /vital: PowerAssert: Expected Error/ :execute g:PowerAssert.assert("d == {}", 'Expected Error')
      finally
        let g:__vital_power_assert_config.__pseudo_throw__ = _save
      endtry
    End

    It throws abort exception with falsy expression
      Throws /vital: PowerAssert:/ :execute g:PowerAssert.assert('2 == 1')
      Throws /vital: PowerAssert:/ :execute g:PowerAssert.assert('0')
    End

  End

  Describe ._assert
    It returns empty string if bool is true
      Assert Equals(sfuncs._assert('vim', 1), '')
    End

    It throws abort exception if bool is false
      let g:sfuncs = sfuncs
      Throws /vital: PowerAssert:/ :execute g:sfuncs._assert('2 == 1', 0)
      unlet g:sfuncs
    End
  End

  Describe ._next_evaluatable_node
    It string
      let node = sfuncs._parse_expr('"hoge"')
      Assert Equals(sfuncs._next_evaluatable_node(node), [])
    End

    It number
      let node = sfuncs._parse_expr('1')
      Assert Equals(sfuncs._next_evaluatable_node(node), [])
    End

    It list
      let node = sfuncs._parse_expr('[1, 2]')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 2)
    End

    It dict
      let node = sfuncs._parse_expr('{ key : value }')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 2)
    End

    It ternary
      let node = sfuncs._parse_expr('1 ? 2 : 3')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 3)
    End

    It or
      let node = sfuncs._parse_expr('1 || 3')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 2)
    End

    It not
      let node = sfuncs._parse_expr('!1')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 1)
    End

    It plus
      let node = sfuncs._parse_expr('+1')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 1)
    End

    It minus
      let node = sfuncs._parse_expr('-1')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 1)
    End

    It subscript
      let node = sfuncs._parse_expr('x[y]')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 2)
    End

    It slice x[y : z]
      let node = sfuncs._parse_expr('x[y : z]')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 3)
    End

    It slice x[ : z]
      let node = sfuncs._parse_expr('x[ : z]')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 2)
    End

    It slice x[y : ]
      let node = sfuncs._parse_expr('x[y : ]')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 2)
    End

    It slice x[ : ]
      let node = sfuncs._parse_expr('x[ : ]')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 1)
    End

    It . (dot)
      let node = sfuncs._parse_expr('x.y')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 1)
      Assert Equals(sfuncs._next_evaluatable_node(node)[0].value, 'x')
    End

    It nested . (dot)
      let node = sfuncs._parse_expr('x.y.z')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 1)
      Assert Equals(sfuncs._next_evaluatable_node(node)[0].left.value, 'x')
      Assert Equals(sfuncs._next_evaluatable_node(node)[0].right.value, 'y')
    End

    It call (with empty args)
      let node = sfuncs._parse_expr('x()')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 0)
    End

    It call (with one arg)
      let node = sfuncs._parse_expr('x(y)')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 1)
      Assert Equals(sfuncs._next_evaluatable_node(node)[0].value, 'y')
    End

    It call (with multiple args)
      let node = sfuncs._parse_expr('x(y, z)')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 2)
    End

    It call (with curly name)
      let node = sfuncs._parse_expr('x{c}y()')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 1)
    End

    It call (with dot)
      let node = sfuncs._parse_expr('x.y()')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 1)
    End

    It curlyname
      let node = sfuncs._parse_expr('x{c}y')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 1)
    End

    It nested curlyname
      let node = sfuncs._parse_expr('x{c{nest}}y')
      let next = sfuncs._next_evaluatable_node(node)
      Assert Equals(len(next), 1)
      let nested1 = sfuncs._next_evaluatable_node(next[0])
      Assert Equals(len(nested1), 1)
      let nested2 = sfuncs._next_evaluatable_node(nested1[0])
      Assert Equals(len(nested2), 1)
      Assert Equals(nested2[0].value.value, 'nest')
    End

    It curlynameexpr
      let node = sfuncs._parse_expr('{c}')
      Assert Equals(len(sfuncs._next_evaluatable_node(node)), 1)
      Assert Equals(sfuncs._next_evaluatable_node(node)[0].value.value, 'c')
    End
  End


  Describe ._compile_expr_with_pos
    It should compile expression with pos
      let node = sfuncs._parse_expr('1 ? 2 : 3')
      let expect = {'pos': {'lnum': 1, 'col': 3, 'i': 2}, 'expr': '(1 ? 2 : 3)'}
      Assert Equals(sfuncs._compile_expr_with_pos(node), expect)
    End
  End

  Describe ._node_to_eval_str
    It should return string node to eval
      let node = sfuncs._compile_expr_with_pos(sfuncs._parse_expr('1 ? 2 : 3'))
      let node_str = sfuncs._node_to_eval_str(node)
      let expect = "{'pos': {'lnum': 1, 'col': 3, 'i': 2}, 'expr': (1 ? 2 : 3)}"
      Assert IsString(node_str)
      Assert Equals(node_str, expect)
    End
  End

  Describe ._build_assertion_graph(whole_expr, evaluated_nodes)
    It should build graphical assertion result
      let x = { 'ary': [1, 'にーーー', 3, 0], 'power': 'assert' }
      let l:zero = 0
      let s:two = 2
      let threeeeee = 'さん3333'
      let expr = 'threeeeee  is# (index(x.ary, l:zero) is# s:two)'

      let msg = [
      \   "threeeeee  is# (index(x.ary, l:zero) is# s:two)",
      \   "|          |         |||     |       |   |",
      \   "'さん3333' 0         3||     0       0   2",
      \   "                      |[1, 'にーーー', 3, 0]",
      \   "                      {'ary': [1, 'にーーー', 3, 0], 'power': 'assert'}"
      \ ]

      let evaluated_nodes = map(sfuncs._aggregate_node_strs_to_eval(expr), 'eval(v:val)')
      Assert Equals(sfuncs._build_assertion_graph(expr, evaluated_nodes), msg)
    End
  End

  Describe ._build_line(nodes, sorted_cols)
    It should build line
      let nodes = [
      \   {'pos': {'col': 1}, 'str_value': "'xxx'"},
      \   {'pos': {'col': 10}, 'str_value': "'yyyy'"}
      \ ]
      let sorted_cols = [1, 7, 10, 18]
      let expect = "'xxx' |  'yyyy'  |"
      Assert Equals(sfuncs._build_line(nodes, sorted_cols), expect)
    End
  End

  Describe ._compile
    It should compile expression node
      let node = sfuncs._parse_expr('1 ? 2 : 3')
      Assert Equals(sfuncs._compile(node), '(1 ? 2 : 3)')
    End
  End

  Describe ._parse_expr
    It should parse expr string
      let node = sfuncs._parse_expr('1 ? 2 : 3')
      Assert HasKey(node, 'type')
    End
  End

  Describe ._aggregate_node_strs_to_eval(expr_str) abort
    It should build nodes for argument of ._assert
      let x = { 'ary': [1, 'にーーー', 3, 0], 'power': 'assert' }
      let l:zero = 0
      let s:two = 2
      let threeeeee = 'さん3333'
      "           0        1         2         3         4
      " col:      1234567890123456789012345678901234567890123456
      let expr = 'threeeeee  is# (index(x.ary, l:zero) is# s:two)'
      let result = map(sfuncs._aggregate_node_strs_to_eval(expr), 'eval(v:val)')
      Assert Equals(len(result), 8)
      let cols = sort([1, 12, 22, 23, 24, 30, 38, 42])
      Assert Equals(sort(map(copy(result), 'v:val.pos.col')), cols)
      let exprs = sort([0, 0, 0, 2, 3, 'さん3333', [1, 'にーーー', 3, 0], { 'ary': [1, 'にーーー', 3, 0], 'power': 'assert' }])
      Assert Equals(sort(map(copy(result), 'v:val.expr')), exprs)
    End
  End

  Describe ._aggregate_nodes_to_eval
    It should aggregates nodes to eval (which we want to inspect actual value)
      let nodes = sfuncs._aggregate_nodes_to_eval('1 ? x : y.z')
      Assert Equals(len(nodes), 4)
      Assert Equals(nodes[0].expr, '(1 ? x : y.z)')
      Assert Equals(nodes[1].expr, 'y.z')
      Assert Equals(nodes[2].expr, 'y')
      Assert Equals(nodes[3].expr, 'x')
    End
  End

  Describe expect
    Before all
      execute g:PowerAssert.define('PowerAssert')
    End

    let num = 1
    let str = 'foo'
    let xs = [1, 2, 3]
    let ys = [1, 2, [3, 4]]
    let ds = {'foo': 'x'}
    let nesteds = {'foo': {'x': 'y'}}

    let refxs = xs
    let refys = ys
    let refds = ds
    let refnesteds = nesteds

    Describe equal
      It should assert equal
        PowerAssert num == 1
        PowerAssert str == "foo"
        PowerAssert xs == [1, 2, 3]
        PowerAssert ys == [1, 2, [3, 4]]
        PowerAssert ds == {"foo": "x"}
        PowerAssert nesteds == {"foo": {"x": "y"}}
      End
      It should throws a report when values are different
        execute CheckThrow('num == 0')
        execute CheckThrow('str == "bar"')
        execute CheckThrow('xs == [1, 2, 3, 4]')
        execute CheckThrow('ys == [1, 2, []]')
        execute CheckThrow('ds == {"foo": "y"}')
        execute CheckThrow('nesteds == {"foo": {"x": "z"}}')
      End
    End

    Describe same
      It should assert same
        PowerAssert num is 1
        PowerAssert str is "foo"
        PowerAssert xs is refxs
        PowerAssert ys is refys
        PowerAssert ds is refds
        PowerAssert nesteds is refnesteds
      End
      It should throws a report when values are different
        execute CheckThrow('num is "1"')
        execute CheckThrow('str is "bar"')
        execute CheckThrow('xs is [1, 2, 3]')
        execute CheckThrow('ys is [1, 2, [3, 4]]')
        execute CheckThrow('ds is {"foo": "x"}')
        execute CheckThrow('nesteds is {"foo": {"x": "y"}}')
      End
    End

    Describe match
      It should assert match
        PowerAssert str =~# "oo"
        PowerAssert str !~# "vim"
      End
      It should throws a report when values are different
        execute CheckThrow('str !~# "oo"')
        execute CheckThrow('str =~# "vim"')
      End
    End

    Describe len
      It should assert len
        PowerAssert len(str) is# 3
      End
      It should throws a report when values are different
        execute CheckThrow('len(str) is# 444')
      End
    End

    Describe have_key
      It should assert have_key
        PowerAssert has_key(ds, str)
      End
      It should throws a report when values are different
        execute CheckThrow('has_key(ds, str . "xxx")')
      End
    End

    Describe type
      It should assert type
        PowerAssert type(str) is type('')
      End
      It should throws a report when values are different
        execute CheckThrow('type(ds) is type(1)')
      End
    End

    Describe float
      let f = 1.4
      It should assert float
        PowerAssert f is 1.4
      End
      It should throws a report when values are different
        execute CheckThrow('f is 1.5')
      End
    End

    Describe deep nested expression
      let f = 1.4
      let x = 'xxx'
      It should assert float
        PowerAssert f is 1.4 && x =~? 'x' || (len([1, 2, 3, { 'xxx': 'yyy'}]) ? x : f) =~# "xx"
      End
      It should throws a report when values are different
        " XXX: something wrong with CheckThrow
        Throws /vital: PowerAssert:/ :execute
        \ g:PowerAssert.assert(
        \   "f isnot 1.4 && x !~? 'x' || (len([1, 2, 3, { 'xxx': 'yyy'}]) ? x : f) is \"xx\""
        \ )
      End
    End

    Describe s:_parse_cmd_trail_msg()
      It should parse optional trailing message for :command
        let tests = [
        \   {
        \      'name': 'no msg',
        \      'in': 'x == 1',
        \      'want': ['x == 1', ''],
        \   },
        \   {
        \      'name': 'double quote',
        \      'in': 'x == 1, "x is one (comment)"',
        \      'want': ['x == 1', 'x is one (comment)'],
        \   },
        \   {
        \      'name': '\" in "',
        \      'in': 'x == 1, "hoge \" foo"',
        \      'want': ['x == 1', 'hoge \" foo'],
        \   },
        \   {
        \      'name': 'single quote',
        \      'in': "x == 1, 'hoge foo'",
        \      'want': ['x == 1', 'hoge foo'],
        \   },
        \   {
        \      'name': ', in function arg',
        \      'in': "has_key({}, 'x'), 'hoge foo'",
        \      'want': ['has_key({}, ''x'')', 'hoge foo'],
        \   },
        \   {
        \      'name': 'empty string',
        \      'in': 'x == 1, ""',
        \      'want': ['x == 1', ''],
        \   },
        \   {
        \      'name': 'quoted',
        \      'in': "'x == 1, \"a\"'",
        \      'want': ["'x == 1, \"a\"'", ''],
        \   },
        \ ]
        for tt in tests
          let got = sfuncs._parse_cmd_trail_msg(tt.in)
          Assert Equals(got, tt.want, tt.name)
        endfor
      End
    End

  End

End
